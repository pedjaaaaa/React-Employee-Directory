{"version":3,"sources":["utils/API.js","components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["Promise","resolve","reject","axios","get","then","res","results","data","map","user","firstName","name","first","lastName","last","username","email","image","picture","thumbnail","city","location","catch","err","Table","columns","useState","filterInput","setFilterInput","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","className","value","onChange","e","target","undefined","placeholder","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","render","row","i","getRowProps","cells","cell","getCellProps","App","useMemo","Header","accessor","setData","useEffect","API","console","log","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSAIe,EACA,WACX,OAAO,IAAIA,SAAQ,SAACC,EAASC,GAC3BC,IAAMC,IAAI,yCAAyCC,MAAK,SAACC,GACvD,IACMC,EADQD,EAAIE,KAAKD,QACDE,KAAI,SAACC,GACzB,MAAO,CACLC,UAAWD,EAAKE,KAAKC,MACrBC,SAAUJ,EAAKE,KAAKG,KACpBC,SAAUN,EAAKO,MACfC,MAAOR,EAAKS,QAAQC,UACpBC,KAAMX,EAAKY,SAASD,SAGxBpB,EAAQM,MACPgB,OAAM,SAACC,GAAD,OAAStB,EAAOsB,U,aCfhB,SAASC,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,QAASlB,EAAQ,EAARA,KAAQ,EACTmB,mBAAS,IADA,mBACxCC,EADwC,KAC3BC,EAD2B,OAW3CC,YACF,CACEJ,UACAlB,QAEFuB,IACAC,KAZAC,EAL6C,EAK7CA,cACAC,EAN6C,EAM7CA,kBACAC,EAP6C,EAO7CA,aACAC,EAR6C,EAQ7CA,KACAC,EAT6C,EAS7CA,WACAC,EAV6C,EAU7CA,UAiBF,OACE,oCACA,wBAAIC,UAAU,YAAd,sBACE,2BACEC,MAAOZ,EACPa,SAZqB,SAAAC,GACzB,IAAMF,EAAQE,EAAEC,OAAOH,YAASI,EAChCN,EAAU,YAAaE,GACvBX,EAAeW,IAUXK,YAAa,oBAEf,0BAAWZ,IACT,+BACGE,EAAa1B,KAAI,SAAAqC,GAAW,OAC3B,uBAAQA,EAAYC,sBACjBD,EAAYE,QAAQvC,KAAI,SAAAwC,GAAM,OAC7B,wCACMA,EAAOC,eAAeD,EAAOE,wBADnC,CAEEZ,UACEU,EAAOG,SACHH,EAAOI,aACL,YACA,WACF,KAGLJ,EAAOK,OAAO,mBAMzB,0BAAWpB,IACRE,EAAK3B,KAAI,SAAC8C,EAAKC,GAEd,OADAnB,EAAWkB,GAET,uBAAQA,EAAIE,cACTF,EAAIG,MAAMjD,KAAI,SAAAkD,GACb,OACE,uBAAQA,EAAKC,eAAiBD,EAAKL,OAAO,mB,MCsB/CO,MAvEf,WAEE,IAAMnC,EAAUoC,mBACd,iBAAM,CACJ,CACEC,OAAQ,YACRrC,QAAS,CAMP,CACEqC,OAAQ,aACRC,SAAU,aAEZ,CACED,OAAQ,YACRC,SAAU,cAIhB,CACED,OAAQ,UACRrC,QAAS,CACP,CACEqC,OAAQ,WACRC,SAAU,YAEZ,CACED,OAAQ,OACRC,SAAU,aAKlB,IApCW,EAuCWrC,mBAAS,IAvCpB,mBAuCNnB,EAvCM,KAuCAyD,EAvCA,KAgEb,OAdAC,qBAAU,WAKRC,IACG9D,MAAK,SAAAC,GACJ2D,EAAQ3D,GACR8D,QAAQC,IAAI/D,QANf,IAUH8D,QAAQC,IAAI7D,GAGV,yBAAK+B,UAAU,OACb,kBAACd,EAAD,CAAOC,QAASA,EAASlB,KAAMA,MCxEjB8D,QACW,cAA7BC,OAAOjD,SAASkD,UAEe,UAA7BD,OAAOjD,SAASkD,UAEhBD,OAAOjD,SAASkD,SAASC,MACvB,2DCZNC,IAASpB,OAAO,kBAAC,EAAD,MAASqB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1E,MAAK,SAAA2E,GACjCA,EAAaC,kB","file":"static/js/main.ec1b3256.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// Export an object containing methods we'll use for accessing the Wikipedia API\n\nexport default {\n  searchTerms: function() {\n    return new Promise((resolve, reject) => {\n      axios.get(\"https://randomuser.me/api/?results=10\").then((res) => {\n        const users = res.data.results;\n        const results = users.map((user) => {\n          return {\n            firstName: user.name.first,\n            lastName: user.name.last,\n            username: user.email,\n            image: user.picture.thumbnail,\n            city: user.location.city\n          };\n        });\n        resolve(results);\n      }).catch((err) => reject(err));\n    });\n  },\n};\n","import React, { useState } from \"react\";\nimport { useTable, useFilters, useSortBy } from \"react-table\";\nimport \"./style.css\";\n\nexport default function Table({ columns, data }) {\n  const [filterInput, setFilterInput] = useState(\"\");\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setFilter\n  } = useTable(\n    {\n      columns,\n      data\n    },\n    useFilters,\n    useSortBy\n  );\n\n  const handleFilterChange = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"firstName\", value);\n    setFilterInput(value);\n  };\n\n  // Render the UI for your table\n  return (\n    <>\n    <h1 className=\"titleNav\">Employee Directory</h1>\n      <input\n        value={filterInput}\n        onChange={handleFilterChange}\n        placeholder={\"Search employee\"}\n      />\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  className={\n                    column.isSorted\n                      ? column.isSortedDesc\n                        ? \"sort-desc\"\n                        : \"sort-asc\"\n                      : \"\"\n                  }\n                >\n                  {column.render(\"Header\")}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n}","import React, { useMemo, useState, useEffect } from \"react\";\nimport API from \"../src/utils/API\"\n\nimport Table from \"../src/components/Table\";\nimport \"./App.css\";\n\n// const Picture = ({ values }) => {\n//   return (\n//     <>\n//       {values.map((image) => {\n//         return (\n//           <img src={image} alt={image} className=\"image\"/>\n//         )\n//       })}\n//     </>\n//   );\n// };\n\nfunction App() {\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Employees\",\n        columns: [\n          // {\n          //   Header: \"Picture\",\n          //   accessor: \"image\",\n          // Cell: ({cell: {value}}) => { return <div><Picture values={value}/></div> }\n          // },\n          {\n            Header: \"First Name\",\n            accessor: \"firstName\"\n          },\n          {\n            Header: \"Last Name\",\n            accessor: \"lastName\"\n          }\n        ]\n      },\n      {\n        Header: \"Details\",\n        columns: [\n          {\n            Header: \"Username\",\n            accessor: \"username\"\n          },\n          {\n            Header: \"City\",\n            accessor: \"city\"\n          }\n        ]\n      }\n    ],\n    []\n  );\n\n  const [data, setData] = useState([]);\n  \n\n  // useEffect(() => {\n  //   (async () => {\n  //     const result = await axios(\"https://api.tvmaze.com/search/shows?q=snow\");\n  //     setData(result.data);\n  //     console.log(result.data);\n  //   })();\n  // }, []);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  function loadUsers() {\n    API.searchTerms()\n      .then(res => {\n        setData(res);\n        console.log(res);\n        });\n      }\n\n  console.log(data);\n  \n  return (\n    <div className=\"App\">\n      <Table columns={columns} data={data} />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}